server:
  port: 8084

spring:
  application:
    name: notification-service

  datasource:
    url: jdbc:postgresql://localhost:5432/agendapulse_notifications
    username: your_db_username
    password: your_db_password
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true

  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: notification-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.agendapulse.*"
        spring.json.type.mapping: "taskEvent:com.agendapulse.notification.event.TaskEvent,calendarEvent:com.agendapulse.notification.event.CalendarEvent"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

  mail:
    host: smtp.gmail.com
    port: 587
    username: your_email@gmail.com
    password: your_app_password
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
    test-connection: false

notification:
  email:
    from: noreply@agendapulse.com
    from-name: AgendaPulse
  websocket:
    endpoint: /ws-notifications
    destination-prefix: /topic
    app-destination-prefix: /app

jwt:
  secret: ${JWT_SECRET}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always